// Int√©gration des rayons de tol√©rance personnalis√©s dans le syst√®me de profil
// Ce script s'int√®gre avec profile.js pour appliquer automatiquement les rayons par agent

// Fonction pour appliquer le rayon de tol√©rance personnalis√© √† un agent
function applyCustomToleranceRadius(agentName, currentRadius) {
    const customRadius = getAgentToleranceRadius(agentName);
    const agentConfig = getAgentConfig(agentName);
    
    console.log(`üîß Application du rayon personnalis√© pour ${agentName}:`);
    console.log(`   - Rayon actuel: ${currentRadius} m`);
    console.log(`   - Rayon personnalis√©: ${customRadius} m`);
    console.log(`   - Commune: ${agentConfig.commune}`);
    console.log(`   - Zone: ${agentConfig.zone}`);
    
    return customRadius;
}

// Fonction pour mettre √† jour le profil d'un agent avec son rayon personnalis√©
async function updateAgentProfileWithCustomTolerance(agentEmail) {
    try {
        // R√©cup√©rer le profil de l'agent
        const profile = await api('/profile?email=' + encodeURIComponent(agentEmail));
        
        if (profile && profile.name) {
            const agentName = profile.name;
            const customRadius = getAgentToleranceRadius(agentName);
            const agentConfig = getAgentConfig(agentName);
            
            // V√©rifier si le rayon actuel est diff√©rent du rayon personnalis√©
            const currentRadius = profile.tolerance_radius_meters || 5000; // 5km par d√©faut
            
            if (currentRadius !== customRadius) {
                console.log(`üîÑ Mise √† jour du rayon pour ${agentName}: ${currentRadius}m ‚Üí ${customRadius}m`);
                
                // Mettre √† jour le profil avec le rayon personnalis√©
                const updateData = {
                    tolerance_radius_meters: customRadius,
                    // Ajouter des informations sur la configuration
                    custom_tolerance_applied: true,
                    tolerance_source: agentConfig.zone || 'default',
                    tolerance_commune: agentConfig.commune || 'Non sp√©cifi√©'
                };
                
                await api('/me/profile', { 
                    method: 'POST', 
                    body: updateData 
                });
                
                console.log(`‚úÖ Rayon de tol√©rance mis √† jour pour ${agentName}`);
                return true;
            } else {
                console.log(`‚ÑπÔ∏è Rayon d√©j√† √† jour pour ${agentName}: ${customRadius}m`);
                return false;
            }
        }
    } catch (error) {
        console.error(`‚ùå Erreur lors de la mise √† jour du rayon pour ${agentEmail}:`, error);
        return false;
    }
}

// Fonction pour appliquer les rayons personnalis√©s √† tous les agents
async function applyCustomToleranceToAllAgents() {
    console.log('üöÄ Application des rayons de tol√©rance personnalis√©s √† tous les agents...');
    
    const agentConfigs = getAllAgentConfigs();
    let updatedCount = 0;
    let errorCount = 0;
    
    for (const agentConfig of agentConfigs) {
        try {
            // Chercher l'email de l'agent par son nom
            // Note: Cette fonction n√©cessiterait une API pour r√©cup√©rer l'email par nom
            console.log(`üìã Traitement de ${agentConfig.nom} (${agentConfig.commune})`);
            
            // Pour l'instant, on affiche les informations
            console.log(`   - Zone: ${agentConfig.zone}`);
            console.log(`   - CEP: ${agentConfig.cep}`);
            console.log(`   - Distance d√©clar√©e: ${agentConfig.distanceDeclaree} km`);
            console.log(`   - Rayon de tol√©rance: ${agentConfig.rayonTolerance} km`);
            
        } catch (error) {
            console.error(`‚ùå Erreur pour ${agentConfig.nom}:`, error);
            errorCount++;
        }
    }
    
    console.log(`‚úÖ Traitement termin√©: ${updatedCount} agents mis √† jour, ${errorCount} erreurs`);
}

// Fonction pour afficher un r√©sum√© des configurations
function displayToleranceSummary() {
    const agentConfigs = getAllAgentConfigs();
    
    console.log('üìä R√©sum√© des configurations de tol√©rance:');
    console.log('==========================================');
    
    // Grouper par zone
    const byZone = agentConfigs.reduce((acc, agent) => {
        if (!acc[agent.zone]) acc[agent.zone] = [];
        acc[agent.zone].push(agent);
        return acc;
    }, {});
    
    Object.entries(byZone).forEach(([zone, agents]) => {
        console.log(`\nüåç Zone ${zone}:`);
        agents.forEach(agent => {
            console.log(`   ‚Ä¢ ${agent.nom} (${agent.commune}): ${agent.rayonTolerance} km`);
        });
    });
    
    // Statistiques
    const totalAgents = agentConfigs.length;
    const avgRadius = agentConfigs.reduce((sum, agent) => sum + agent.rayonTolerance, 0) / totalAgents;
    const minRadius = Math.min(...agentConfigs.map(agent => agent.rayonTolerance));
    const maxRadius = Math.max(...agentConfigs.map(agent => agent.rayonTolerance));
    
    console.log('\nüìà Statistiques:');
    console.log(`   - Total agents: ${totalAgents}`);
    console.log(`   - Rayon moyen: ${avgRadius.toFixed(1)} km`);
    console.log(`   - Rayon minimum: ${minRadius} km`);
    console.log(`   - Rayon maximum: ${maxRadius} km`);
}

// Fonction pour valider les configurations
function validateToleranceConfigs() {
    const agentConfigs = getAllAgentConfigs();
    const issues = [];
    
    agentConfigs.forEach(agent => {
        // V√©rifier que le rayon est raisonnable (entre 1km et 100km)
        if (agent.rayonTolerance < 1 || agent.rayonTolerance > 100) {
            issues.push(`${agent.nom}: Rayon ${agent.rayonTolerance} km hors limites (1-100 km)`);
        }
        
        // V√©rifier que la distance d√©clar√©e est coh√©rente
        const expectedRadius = calculateToleranceRadius(agent.distanceDeclaree);
        if (Math.abs(agent.rayonTolerance - expectedRadius) > 0.1) {
            issues.push(`${agent.nom}: Rayon ${agent.rayonTolerance} km ne correspond pas √† 80% de ${agent.distanceDeclaree} km`);
        }
    });
    
    if (issues.length === 0) {
        console.log('‚úÖ Toutes les configurations sont valides');
    } else {
        console.log('‚ö†Ô∏è Probl√®mes d√©tect√©s:');
        issues.forEach(issue => console.log(`   - ${issue}`));
    }
    
    return issues;
}

// Fonction utilitaire pour convertir les unit√©s
function convertUnits(value, fromUnit, toUnit) {
    const conversions = {
        'km': { 'm': 1000, 'km': 1 },
        'm': { 'km': 0.001, 'm': 1 }
    };
    
    return value * conversions[fromUnit][toUnit];
}

// Export des fonctions pour utilisation globale
if (typeof window !== 'undefined') {
    window.applyCustomToleranceRadius = applyCustomToleranceRadius;
    window.updateAgentProfileWithCustomTolerance = updateAgentProfileWithCustomTolerance;
    window.applyCustomToleranceToAllAgents = applyCustomToleranceToAllAgents;
    window.displayToleranceSummary = displayToleranceSummary;
    window.validateToleranceConfigs = validateToleranceConfigs;
    window.convertUnits = convertUnits;
}
