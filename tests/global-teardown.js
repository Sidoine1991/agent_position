// Nettoyage global apr√®s les tests
async function globalTeardown(config) {
  console.log('üßπ Nettoyage des tests automatis√©s');
  
  // G√©n√©rer un rapport de synth√®se
  const fs = require('fs');
  const path = require('path');
  
  const resultsFile = path.join(__dirname, '..', 'test-results', 'results.json');
  
  if (fs.existsSync(resultsFile)) {
    try {
      const results = JSON.parse(fs.readFileSync(resultsFile, 'utf8'));
      
      const summary = {
        total: results.stats?.total || 0,
        passed: results.stats?.passed || 0,
        failed: results.stats?.failed || 0,
        skipped: results.stats?.skipped || 0,
        duration: results.stats?.duration || 0
      };
      
      console.log('üìä R√©sum√© des tests:');
      console.log(`   Total: ${summary.total}`);
      console.log(`   R√©ussis: ${summary.passed}`);
      console.log(`   √âchou√©s: ${summary.failed}`);
      console.log(`   Ignor√©s: ${summary.skipped}`);
      console.log(`   Dur√©e: ${Math.round(summary.duration / 1000)}s`);
      
      // √âcrire le r√©sum√©
      const summaryFile = path.join(__dirname, '..', 'test-results', 'summary.json');
      fs.writeFileSync(summaryFile, JSON.stringify(summary, null, 2));
      
    } catch (error) {
      console.log('‚ö†Ô∏è Erreur lors de la g√©n√©ration du r√©sum√©:', error.message);
    }
  }
  
  console.log('‚úÖ Nettoyage termin√©');
  console.log('üìÅ R√©sultats disponibles dans: test-results/');
}

module.exports = globalTeardown;
