const fs = require('fs');
const path = require('path');

console.log('üîç Diagnostic des probl√®mes de navigation...\n');

function diagnoseNavigationIssues() {
  try {
    // 1. V√©rifier la structure HTML du dashboard
    console.log('1Ô∏è‚É£ V√©rification de la structure HTML du dashboard...');
    
    const dashboardHtml = 'web/dashboard.html';
    if (fs.existsSync(dashboardHtml)) {
      const content = fs.readFileSync(dashboardHtml, 'utf8');
      
      // V√©rifier le logo
      const logoMatch = content.match(/<img[^>]*class="navbar-logo"[^>]*>/);
      if (logoMatch) {
        console.log('‚úÖ Logo trouv√© dans dashboard.html:', logoMatch[0]);
      } else {
        console.log('‚ùå Logo non trouv√© dans dashboard.html');
      }
      
      // V√©rifier le lien pr√©sence
      const presenceLinkMatch = content.match(/<a[^>]*id="presence-link"[^>]*>/);
      if (presenceLinkMatch) {
        console.log('‚úÖ Lien pr√©sence trouv√©:', presenceLinkMatch[0]);
      } else {
        console.log('‚ùå Lien pr√©sence non trouv√©');
      }
    } else {
      console.log('‚ùå Fichier dashboard.html non trouv√©');
    }

    // 2. V√©rifier les gestionnaires d'√©v√©nements dans dashboard.js
    console.log('\n2Ô∏è‚É£ V√©rification des gestionnaires d\'√©v√©nements dans dashboard.js...');
    
    const dashboardJs = 'web/dashboard.js';
    if (fs.existsSync(dashboardJs)) {
      const content = fs.readFileSync(dashboardJs, 'utf8');
      
      // Chercher les gestionnaires d'√©v√©nements storage
      const storageMatches = content.match(/window\.addEventListener\('storage'/g);
      if (storageMatches) {
        console.log(`‚ö†Ô∏è ${storageMatches.length} gestionnaire(s) storage trouv√©(s) - peut causer des redirections automatiques`);
      }
      
      // Chercher les redirections automatiques
      const redirectMatches = content.match(/window\.location\.href\s*=/g);
      if (redirectMatches) {
        console.log(`‚ö†Ô∏è ${redirectMatches.length} redirection(s) automatique(s) trouv√©e(s)`);
      }
      
      // Chercher les gestionnaires de clic
      const clickMatches = content.match(/addEventListener\('click'/g);
      if (clickMatches) {
        console.log(`‚ÑπÔ∏è ${clickMatches.length} gestionnaire(s) de clic trouv√©(s)`);
      }
    } else {
      console.log('‚ùå Fichier dashboard.js non trouv√©');
    }

    // 3. V√©rifier les gestionnaires d'√©v√©nements dans app.js
    console.log('\n3Ô∏è‚É£ V√©rification des gestionnaires d\'√©v√©nements dans app.js...');
    
    const appJs = 'web/app.js';
    if (fs.existsSync(appJs)) {
      const content = fs.readFileSync(appJs, 'utf8');
      
      // Chercher le gestionnaire de clic global
      const globalClickMatch = content.match(/document\.addEventListener\('click'/);
      if (globalClickMatch) {
        console.log('‚úÖ Gestionnaire de clic global trouv√© dans app.js');
        
        // Chercher la logique du logo
        const logoLogicMatch = content.match(/navbar-logo.*window\.location\.href.*home\.html/s);
        if (logoLogicMatch) {
          console.log('‚úÖ Logique de redirection du logo vers home.html trouv√©e');
        } else {
          console.log('‚ùå Logique de redirection du logo non trouv√©e');
        }
      } else {
        console.log('‚ùå Gestionnaire de clic global non trouv√©');
      }
    } else {
      console.log('‚ùå Fichier app.js non trouv√©');
    }

    // 4. Analyser les probl√®mes identifi√©s
    console.log('\n4Ô∏è‚É£ Analyse des probl√®mes identifi√©s...');
    
    console.log('üîç Probl√®me 1: Logo ne redirige pas vers home');
    console.log('   - Le logo a la classe "navbar-logo"');
    console.log('   - app.js a un gestionnaire pour ".navbar-logo"');
    console.log('   - Le gestionnaire redirige vers "/home.html"');
    console.log('   - Probl√®me possible: Conflit avec d\'autres gestionnaires');
    
    console.log('\nüîç Probl√®me 2: Bouton Pr√©sence redirige vers index puis revient √† dashboard');
    console.log('   - Le bouton a href="/" et id="presence-link"');
    console.log('   - app.js redirige vers "/" (index)');
    console.log('   - dashboard.js a un gestionnaire storage qui rafra√Æchit automatiquement');
    console.log('   - Probl√®me possible: Le gestionnaire storage force le retour au dashboard');

    // 5. Recommandations de correction
    console.log('\n5Ô∏è‚É£ Recommandations de correction...');
    
    console.log('üîß Pour le logo:');
    console.log('   1. V√©rifier que le logo a bien la classe "navbar-logo"');
    console.log('   2. S\'assurer qu\'aucun autre gestionnaire ne bloque l\'√©v√©nement');
    console.log('   3. Ajouter des logs de d√©bogage pour tracer le clic');
    
    console.log('\nüîß Pour le bouton Pr√©sence:');
    console.log('   1. Modifier le gestionnaire storage pour ne pas rediriger automatiquement');
    console.log('   2. Ajouter une condition pour √©viter la redirection si on vient de cliquer sur Pr√©sence');
    console.log('   3. Utiliser un flag temporaire pour d√©sactiver le rafra√Æchissement automatique');

    // 6. Cr√©er un script de test
    console.log('\n6Ô∏è‚É£ Script de test pour diagnostiquer la navigation...');
    
    const testScript = `
// Script de test pour diagnostiquer les probl√®mes de navigation
console.log('üß™ Test de navigation - Logo et bouton Pr√©sence');

// 1. Tester le clic sur le logo
const logo = document.querySelector('.navbar-logo');
if (logo) {
  console.log('‚úÖ Logo trouv√©:', logo);
  
  // Ajouter un gestionnaire de test
  logo.addEventListener('click', (e) => {
    console.log('üéØ Clic sur logo d√©tect√©');
    console.log('Event:', e);
    console.log('Target:', e.target);
    console.log('Current target:', e.currentTarget);
  });
} else {
  console.log('‚ùå Logo non trouv√©');
}

// 2. Tester le clic sur le bouton Pr√©sence
const presenceBtn = document.getElementById('presence-link');
if (presenceBtn) {
  console.log('‚úÖ Bouton Pr√©sence trouv√©:', presenceBtn);
  
  // Ajouter un gestionnaire de test
  presenceBtn.addEventListener('click', (e) => {
    console.log('üéØ Clic sur bouton Pr√©sence d√©tect√©');
    console.log('Event:', e);
    console.log('Href:', presenceBtn.href);
  });
} else {
  console.log('‚ùå Bouton Pr√©sence non trouv√©');
}

// 3. Surveiller les changements de location
let currentLocation = window.location.href;
const checkLocation = setInterval(() => {
  if (window.location.href !== currentLocation) {
    console.log('üîÑ CHANGEMENT DE LOCATION D√âTECT√â!');
    console.log('De:', currentLocation);
    console.log('Vers:', window.location.href);
    currentLocation = window.location.href;
  }
}, 100);

// 4. Surveiller les √©v√©nements storage
window.addEventListener('storage', (e) => {
  console.log('üíæ √âv√©nement storage d√©tect√©:', e.key, e.newValue);
});

console.log('‚úÖ Surveillance de navigation activ√©e');
console.log('üí° Cliquez sur le logo et le bouton Pr√©sence pour voir les logs');
`;

    console.log('üìù Script de test cr√©√©. Copiez et collez ce code dans la console du navigateur :');
    console.log(testScript);

    console.log('\n‚úÖ Diagnostic des probl√®mes de navigation termin√© !');

  } catch (error) {
    console.error('‚ùå Erreur lors du diagnostic:', error);
  }
}

diagnoseNavigationIssues();
