#!/usr/bin/env node

/**
 * Script pour v√©rifier le sch√©ma de la table planifications
 */

const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!SUPABASE_URL || !SUPABASE_SERVICE_ROLE_KEY) {
  console.error('‚ùå Variables d\'environnement manquantes');
  process.exit(1);
}

// Initialiser le client Supabase
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_ROLE_KEY, {
  auth: { autoRefreshToken: false, persistSession: false }
});

async function checkPlanificationsSchema() {
  console.log('üîç V√©rification du sch√©ma de la table planifications...\n');
  
  try {
    // R√©cup√©rer la structure de la table
    const { data, error } = await supabase
      .from('planifications')
      .select('*')
      .limit(1);

    if (error) {
      console.log('‚ùå Erreur:', error.message);
      return;
    }

    if (data && data.length > 0) {
      console.log('üìã Colonnes de la table planifications:');
      Object.keys(data[0]).forEach(column => {
        console.log(`   - ${column}`);
      });
    } else {
      console.log('‚ö†Ô∏è  Aucune donn√©e dans la table planifications');
    }

    // V√©rifier si la colonne notes existe
    const hasNotes = data && data.length > 0 && 'notes' in data[0];
    console.log(`\nüìä Colonne 'notes': ${hasNotes ? 'EXISTE' : 'N\'EXISTE PAS'}`);

    // V√©rifier les colonnes importantes
    const importantColumns = ['id', 'user_id', 'agent_id', 'date', 'planned_start_time', 'planned_end_time', 'description_activite', 'project_name'];
    console.log('\nüìä V√©rification des colonnes importantes:');
    importantColumns.forEach(column => {
      const exists = data && data.length > 0 && column in data[0];
      console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${column}`);
    });

    return { hasNotes, columns: data && data.length > 0 ? Object.keys(data[0]) : [] };
  } catch (err) {
    console.log('‚ùå Exception:', err.message);
    return { hasNotes: false, columns: [] };
  }
}

async function generateFixScript() {
  console.log('\nüìÑ G√©n√©ration du script de correction...\n');
  
  const fixScript = `
-- Script pour corriger la table planifications
-- Ex√©cutez ce script dans le SQL Editor de Supabase

-- 1. V√©rifier la structure actuelle
SELECT column_name, data_type, is_nullable, column_default
FROM information_schema.columns
WHERE table_name = 'planifications'
ORDER BY ordinal_position;

-- 2. Ajouter la colonne notes si elle n'existe pas
DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns WHERE table_name='planifications' AND column_name='notes') THEN
        ALTER TABLE planifications ADD COLUMN notes TEXT;
        RAISE NOTICE 'Colonne notes ajout√©e √† la table planifications.';
    ELSE
        RAISE NOTICE 'Colonne notes existe d√©j√† dans la table planifications.';
    END IF;
END $$;

-- 3. V√©rifier la structure finale
SELECT column_name, data_type, is_nullable, column_default
FROM information_schema.columns
WHERE table_name = 'planifications'
ORDER BY ordinal_position;
`;

  console.log('üìã Script de correction:');
  console.log('‚îÄ'.repeat(60));
  console.log(fixScript);
  console.log('‚îÄ'.repeat(60));

  // Sauvegarder le script
  const fs = require('fs');
  const path = require('path');
  const scriptPath = path.join(__dirname, 'fix_planifications_notes_column.sql');
  
  fs.writeFileSync(scriptPath, fixScript);
  console.log(`\nüíæ Script sauvegard√© dans: ${scriptPath}`);
}

async function main() {
  console.log('üîç Diagnostic du sch√©ma planifications\n');
  console.log('‚ïê'.repeat(60));

  try {
    // V√©rifier le sch√©ma
    const { hasNotes, columns } = await checkPlanificationsSchema();
    
    // G√©n√©rer le script de correction
    await generateFixScript();

    console.log('\nüìä R√©sum√© du diagnostic:');
    console.log('‚îÄ'.repeat(60));
    console.log(`Colonne 'notes': ${hasNotes ? 'EXISTE' : 'N\'EXISTE PAS'}`);
    console.log(`Colonnes totales: ${columns.length}`);

    if (!hasNotes) {
      console.log('\nüí° Solution:');
      console.log('‚îÄ'.repeat(60));
      console.log('1. üìù Ex√©cutez le script database/fix_planifications_notes_column.sql dans Supabase');
      console.log('2. ‚úÖ La colonne notes sera ajout√©e √† la table planifications');
      console.log('3. üîÑ L\'erreur d\'enregistrement sera r√©solue');
    } else {
      console.log('\n‚úÖ La colonne notes existe d√©j√†');
      console.log('üîç L\'erreur peut venir d\'un autre probl√®me');
    }

    console.log('\n‚ú® Diagnostic termin√©!');

  } catch (error) {
    console.error('‚ùå Erreur fatale lors du diagnostic:', error.message);
    process.exit(1);
  }
}

// Ex√©cuter le script
if (require.main === module) {
  main();
}

module.exports = { checkPlanificationsSchema, generateFixScript };
