// Script pour finaliser la correction des r√¥les superviseur
require('dotenv').config();
const { createClient } = require('@supabase/supabase-js');

async function finalizeSupervisorRoles() {
  const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY, { 
    auth: { persistSession: false } 
  });

  try {
    console.log('üéØ Finalisation de la correction des r√¥les superviseur...\n');
    
    // 1. Tester si la contrainte a √©t√© mise √† jour
    console.log('1Ô∏è‚É£ Test de la nouvelle contrainte...');
    const testUser = {
      name: 'Test Superviseur',
      email: 'test-superviseur-' + Date.now() + '@example.com',
      password_hash: '$2b$10$test',
      role: 'superviseur',
      is_verified: true
    };
    
    const { data: insertResult, error: insertError } = await supabase
      .from('users')
      .insert([testUser])
      .select('id, name, role')
      .single();
    
    if (insertError) {
      console.log('‚ùå La contrainte n\'a pas encore √©t√© mise √† jour:');
      console.log(`   Erreur: ${insertError.message}`);
      console.log('\nüí° Veuillez d\'abord ex√©cuter le script SQL dans Supabase:');
      console.log('   ALTER TABLE users DROP CONSTRAINT IF EXISTS users_role_check;');
      console.log("   ALTER TABLE users ADD CONSTRAINT users_role_check CHECK (role IN ('admin', 'superviseur', 'agent'));");
      return;
    }
    
    console.log('‚úÖ Contrainte mise √† jour avec succ√®s!');
    console.log(`   Utilisateur test cr√©√©: ${insertResult.name} (ID: ${insertResult.id})`);
    
    // Nettoyer l'utilisateur test
    await supabase.from('users').delete().eq('id', insertResult.id);
    console.log('üßπ Utilisateur test supprim√©');
    
    // 2. Restaurer les r√¥les superviseur pour les utilisateurs concern√©s
    console.log('\n2Ô∏è‚É£ Restauration des r√¥les superviseur...');
    
    // Utilisateurs qui devraient avoir le r√¥le superviseur
    const supervisorEmails = [
      'agbaniephrem@gmail.com',
      'bernice.tognon@gmail.com',
      'coutchikabernard26@gmail.com'
    ];
    
    for (const email of supervisorEmails) {
      const { error: updateError } = await supabase
        .from('users')
        .update({ role: 'superviseur' })
        .eq('email', email);
      
      if (updateError) {
        console.log(`‚ùå Erreur pour ${email}: ${updateError.message}`);
      } else {
        console.log(`‚úÖ ${email} mis √† jour: admin ‚Üí superviseur`);
      }
    }
    
    // 3. V√©rification finale
    console.log('\n3Ô∏è‚É£ V√©rification finale...');
    const { data: finalUsers, error: finalError } = await supabase
      .from('users')
      .select('id, name, email, role')
      .in('email', supervisorEmails);
    
    if (finalError) {
      console.error('‚ùå Erreur lors de la v√©rification finale:', finalError);
      return;
    }
    
    console.log('üìã √âtat final des superviseurs:');
    finalUsers.forEach(user => {
      console.log(`   - ${user.name} (${user.email}): ${user.role}`);
    });
    
    // 4. Test complet
    console.log('\n4Ô∏è‚É£ Test complet du syst√®me...');
    const { data: testResult, error: testError } = await supabase
      .from('users')
      .select('role')
      .limit(10);
    
    if (testError) {
      console.error('‚ùå Erreur lors du test:', testError);
      return;
    }
    
    const roles = [...new Set(testResult.map(u => u.role))];
    console.log(`‚úÖ R√¥les disponibles: ${roles.join(', ')}`);
    
    if (roles.includes('superviseur')) {
      console.log('\nüéâ SUCC√àS COMPLET!');
      console.log('   Le r√¥le "superviseur" est maintenant fonctionnel.');
      console.log('   Tous les utilisateurs ont √©t√© mis √† jour correctement.');
    } else {
      console.log('\n‚ö†Ô∏è Le r√¥le "superviseur" n\'est pas encore disponible.');
    }
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©rale:', error);
  }
}

finalizeSupervisorRoles();
